
const ROM_ADDR       = 0xFF00; // ROM
const RAM_BANK1_ADDR = 0x0000; // RAM
const RAM_BANK2_ADDR = 0xE000; // EXTENDED RAM

const XAML = 0x24;   // Last "opened" location Low
const XAMH = 0x25;   // Last "opened" location High
const STL  = 0x26;   // Store address Low
const STH  = 0x27;   // Store address High
const L    = 0x28;   // Hex value parsing Low
const H    = 0x29;   // Hex value parsing High
const YSAV = 0x2A;   // Used to see if hex value is given
const MODE = 0x2B;   // $00=XAM, $7F=STOR, $AE=BLOCK XAM
const IN   = 0x200;  // Input buffer ($0200,$027F)

const RAM_BANK_1_SIZE = 4096;
const RAM_BANK_2_SIZE = 4096;

const RAM_BANK_1 = new Array(RAM_BANK_1_SIZE);
const RAM_BANK_2 = new Array(RAM_BANK_2_SIZE);

// PIA MAPPING 6821
const PIA_ADDR   = 0xD000; // PIA 6821 ADDR BASE SPACE
const KBD_ADDR   = 0xD010; // Keyb Char - B7 High on keypress
const KBDCR_ADDR = 0xD011; // Keyb Status - B7 High on keypress / Low when ready
const DSP_ADDR   = 0xD012; // DSP Char
const DSPCR_ADDR = 0xD013; // DSP Status - B7 Low if VIDEO ready

let KBD   = 0;
let KBDCR = 0;
let DSP   = 0;
let DSPCR = 0;

const BS      = 0xDF;  // Backspace key, arrow left key (B7 High)
const CR      = 0x8D;  // Carriage Return (B7 High)
const ESC     = 0x9B;  // ESC key (B7 High)



CPU6502 = function() {

	this.PC = 0; // Program counter

	this.A = 0; this.X = 0; this.Y = 0; this.S = 0; // Registers
	this.N = 0; this.Z = 1; this.C = 0; this.V = 0; // ALU flags
	this.I = 0; this.D = 0; // Other flags

	this.irq = 0; this.nmi = 0; // IRQ lines

	this.tmp = 0; this.addr = 0; // Temporary registers
	this.opcode = 0; // Current opcode
	this.cycles = 0; // Cycles counter
}

CPU6502.constructor = CPU6502;

////////////////////////////////////////////////////////////////////////////////
// CPU control
////////////////////////////////////////////////////////////////////////////////

CPU6502.prototype.reset = function() {

	this.A = 0; this.X = 0; this.Y = 0; this.S = 0;
	this.N = 0; this.Z = 1; this.C = 0; this.V = 0;
	this.I = 0; this.D = 0;

	this.PC = (this.read(0xFFFD) << 8) | this.read(0xFFFC);
}

CPU6502.prototype.step = function() {
	this.opcode = this.read( this.PC++ );
	CPU6502op[ this.opcode ]( this );
}

CPU6502.prototype.log = function() {
	var msg = "nPC=" + this.PC.toString(16);
	msg += " cyc=" + this.cycles;
	msg += " [" + this.opcode.toString(16) + "] ";
	msg += ( this.C ? "C" : "-");
	msg += ( this.N ? "N" : "-");
	msg += ( this.Z ? "Z" : "-");
	msg += ( this.V ? "V" : "-");
	msg += ( this.D ? "D" : "-");
	msg += ( this.I ? "I" : "-");
	msg += " A=" + this.A.toString(16);
	msg += " X=" + this.X.toString(16);
	msg += " Y=" + this.Y.toString(16);
	msg += " S=" + this.S.toString(16);
	console.log(msg);
}

////////////////////////////////////////////////////////////////////////////////
// Subroutines - addressing modes & flags
////////////////////////////////////////////////////////////////////////////////

CPU6502.prototype.izx = function() {
	var a = (this.read(this.PC++) + this.X) & 0xFF;
	this.addr = (this.read(a+1) << 8) | this.read(a);
	this.cycles += 6;
}

CPU6502.prototype.izy = function() {
	var a = this.read(this.PC++);
	var paddr = (this.read((a+1) & 0xFF) << 8) | this.read(a);
	this.addr = (paddr + this.Y);
	if ( (paddr & 0x100) != (this.addr & 0x100) ) {
		this.cycles += 6;
	} else {
		this.cycles += 5;
	}
}

CPU6502.prototype.ind = function() {
	var a = this.read(this.PC);
	a |= this.read( (this.PC & 0xFF00) | ((this.PC + 1) & 0xFF) ) << 8;
	this.addr = this.read(a);
	this.addr |= (this.read(a+1) << 8);
	this.cycles += 5;
}

CPU6502.prototype.zp = function() {
	this.addr = this.read(this.PC++);
	this.cycles += 3;
}

CPU6502.prototype.zpx = function() {
	this.addr = (this.read(this.PC++) + this.X) & 0xFF;
	this.cycles += 4;
}

CPU6502.prototype.zpy = function() {
	this.addr = (this.read(this.PC++) + this.Y) & 0xFF;
	this.cycles += 4;
}

CPU6502.prototype.imp = function() {
	this.cycles += 2;
}

CPU6502.prototype.imm = function() {
	this.addr = this.PC++;
	this.cycles += 2;
}

CPU6502.prototype.abs = function() {
	this.addr = this.read(this.PC++);
	this.addr |= (this.read(this.PC++) << 8);
	this.cycles += 4;
}

CPU6502.prototype.abx = function() {
	var paddr = this.read(this.PC++);
	paddr |= (this.read(this.PC++) << 8);
	this.addr = (paddr + this.X);
	if ( (paddr & 0x100) != (this.addr & 0x100) ) {
		this.cycles += 5;
	} else {
		this.cycles += 4;
	}
}

CPU6502.prototype.aby = function() {
	var paddr = this.read(this.PC++);
	paddr |= (this.read(this.PC++) << 8);
	this.addr = (paddr + this.Y);
	if ( (paddr & 0x100) != (this.addr & 0x100) ) {
		this.cycles += 5;
	} else {
		this.cycles += 4;
	}
}

CPU6502.prototype.rel = function() {
	this.addr = this.read(this.PC++);
	if (this.addr & 0x80) {
		this.addr -= 0x100;
	}
	this.addr += this.PC;
	this.cycles += 2;
}

////////////////////////////////////////////////////////////////////////////////

CPU6502.prototype.rmw = function() {
	this.write(this.addr, this.tmp & 0xFF);
	this.cycles += 2;
}

////////////////////////////////////////////////////////////////////////////////

CPU6502.prototype.fnz = function(v) {
	this.Z = ((v & 0xFF) == 0) ? 1 : 0;
	this.N = ((v & 0x80) != 0) ? 1 : 0;
}

// Borrow
CPU6502.prototype.fnzb = function(v) {
	this.Z = ((v & 0xFF) == 0) ? 1 : 0;
	this.N = ((v & 0x80) != 0) ? 1 : 0;
	this.C = ((v & 0x100) != 0) ? 0 : 1;
}

// Carry
CPU6502.prototype.fnzc = function(v) {
	this.Z = ((v & 0xFF) == 0) ? 1 : 0;
	this.N = ((v & 0x80) != 0) ? 1 : 0;
	this.C = ((v & 0x100) != 0) ? 1 : 0;
}

CPU6502.prototype.branch = function(v) {
	if (v) {
		if ( (this.addr & 0x100) != (this.PC & 0x100) ) {
			this.cycles += 2;
		} else {
			this.cycles += 1;
		}
		this.PC = this.addr;
	}
}

////////////////////////////////////////////////////////////////////////////////
// Subroutines - instructions
////////////////////////////////////////////////////////////////////////////////
CPU6502.prototype.adc = function() {
	var v = this.read(this.addr);
	var c = this.C;
	var r = this.A + v + c;
	if (this.D) {
		var al = (this.A & 0x0F) + (v & 0x0F) + c;
		if (al > 9) al += 6;
		var ah = (this.A >> 4) + (v >> 4) + ((al > 15) ? 1 : 0);
		this.Z = ((r & 0xFF) == 0) ? 1 : 0;
		this.N = ((ah & 8) != 0) ? 1 : 0;
		this.V = ((~(this.A ^ v) & (this.A ^ (ah << 4)) & 0x80) != 0) ? 1 : 0;
		if (ah > 9) ah += 6;
		this.C = (ah > 15) ? 1 : 0;
		this.A = ((ah << 4) | (al & 15)) & 0xFF;
	} else {
		this.Z = ((r & 0xFF) == 0) ? 1 : 0;
		this.N = ((r & 0x80) != 0) ? 1 : 0;
		this.V = ((~(this.A ^ v) & (this.A ^ r) & 0x80) != 0) ? 1 : 0;
		this.C = ((r & 0x100) != 0) ? 1 : 0;
		this.A = r & 0xFF;
	}
}

CPU6502.prototype.and = function() {
	this.A &= this.read(this.addr);
	this.fnz(this.A);
}

CPU6502.prototype.asl = function() {
	this.tmp = this.read(this.addr) << 1;
	this.fnzc(this.tmp);
	this.tmp &= 0xFF;
}
CPU6502.prototype.asla = function() {
	this.tmp = this.A << 1;
	this.fnzc(this.tmp);
	this.A = this.tmp & 0xFF;
}

CPU6502.prototype.bit = function() {
	this.tmp = this.read(this.addr);
	this.N = ((this.tmp & 0x80) != 0) ? 1 : 0;
	this.V = ((this.tmp & 0x40) != 0) ? 1 : 0;
	this.Z = ((this.tmp & this.A) == 0) ? 1 : 0;
}

CPU6502.prototype.brk = function() {
	this.PC++;
	this.write(this.S + 0x100, this.PC >> 8);
	this.S = (this.S - 1) & 0xFF;
	this.write(this.S + 0x100, this.PC & 0xFF);
	this.S = (this.S - 1) & 0xFF;
	var v = this.N << 7;
	v |= this.V << 6;
	v |= 3 << 4;
	v |= this.D << 3;
	v |= this.I << 2;
	v |= this.Z << 1;
	v |= this.C;
	this.write(this.S + 0x100, v);
	this.S = (this.S - 1) & 0xFF;
	this.I = 1;
	this.D = 0;
	this.PC = (this.read(0xFFFF) << 8) | this.read(0xFFFE);
	this.cycles += 5;
}

CPU6502.prototype.bcc = function() { this.branch( this.C == 0 ); }
CPU6502.prototype.bcs = function() { this.branch( this.C == 1 ); }
CPU6502.prototype.beq = function() { this.branch( this.Z == 1 ); }
CPU6502.prototype.bne = function() { this.branch( this.Z == 0 ); }
CPU6502.prototype.bmi = function() { this.branch( this.N == 1 ); }
CPU6502.prototype.bpl = function() { this.branch( this.N == 0 ); }
CPU6502.prototype.bvc = function() { this.branch( this.V == 0 ); }
CPU6502.prototype.bvs = function() { this.branch( this.V == 1 ); }


CPU6502.prototype.clc = function() { this.C = 0; }
CPU6502.prototype.cld = function() { this.D = 0; }
CPU6502.prototype.cli = function() { this.I = 0; }
CPU6502.prototype.clv = function() { this.V = 0; }

CPU6502.prototype.cmp = function() {
	this.fnzb( this.A - this.read(this.addr) );
}

CPU6502.prototype.cpx = function() {
	this.fnzb( this.X - this.read(this.addr) );
}

CPU6502.prototype.cpy = function() {
	this.fnzb( this.Y - this.read(this.addr) );
}

CPU6502.prototype.dec = function() {
	this.tmp = (this.read(this.addr) - 1) & 0xFF;
	this.fnz(this.tmp);
}

CPU6502.prototype.dex = function() {
	this.X = (this.X - 1) & 0xFF;
	this.fnz(this.X);
}

CPU6502.prototype.dey = function() {
	this.Y = (this.Y - 1) & 0xFF;
	this.fnz(this.Y);
}

CPU6502.prototype.eor = function() {
	this.A ^= this.read(this.addr);
	this.fnz(this.A);
}

CPU6502.prototype.inc = function() {
	this.tmp = (this.read(this.addr) + 1) & 0xFF;
	this.fnz(this.tmp);
}

CPU6502.prototype.inx = function() {
	this.X = (this.X + 1) & 0xFF;
	this.fnz(this.X);
}

CPU6502.prototype.iny = function() {
	this.Y = (this.Y + 1) & 0xFF;
	this.fnz(this.Y);
}

CPU6502.prototype.jmp = function() {
	this.PC = this.addr;
	this.cycles--;
}

CPU6502.prototype.jsr = function() {
	this.write(this.S + 0x100, (this.PC - 1) >> 8);
	this.S = (this.S - 1) & 0xFF;
	this.write(this.S + 0x100, (this.PC - 1) & 0xFF);
	this.S = (this.S - 1) & 0xFF;
	this.PC = this.addr;
	this.cycles += 2;
}

CPU6502.prototype.lda = function() {
	this.A = this.read(this.addr);
	this.fnz(this.A);
}

CPU6502.prototype.ldx = function() {
	this.X = this.read(this.addr);
	this.fnz(this.X);
}

CPU6502.prototype.ldy = function() {
	this.Y = this.read(this.addr);
	this.fnz(this.Y);
}

CPU6502.prototype.ora = function() {
	this.A |= this.read(this.addr);
	this.fnz(this.A);
}

CPU6502.prototype.rol = function() {
	this.tmp = (this.read(this.addr) << 1) | this.C;
	this.fnzc(this.tmp);
	this.tmp &= 0xFF;
}
CPU6502.prototype.rola = function() {
	this.tmp = (this.A << 1) | this.C;
	this.fnzc(this.tmp);
	this.A = this.tmp & 0xFF;
}

CPU6502.prototype.ror = function() {
	this.tmp = this.read(this.addr);
	this.tmp = ((this.tmp & 1) << 8) | (this.C << 7) | (this.tmp >> 1);
	this.fnzc(this.tmp);
	this.tmp &= 0xFF;
}
CPU6502.prototype.rora = function() {
	this.tmp = ((this.A & 1) << 8) | (this.C << 7) | (this.A >> 1);
	this.fnzc(this.tmp);
	this.A = this.tmp & 0xFF;
}


CPU6502.prototype.lsr = function() {
	this.tmp = this.read(this.addr);
	this.tmp = ((this.tmp & 1) << 8) | (this.tmp >> 1);
	this.fnzc(this.tmp);
	this.tmp &= 0xFF;
}
CPU6502.prototype.lsra = function() {
	this.tmp = ((this.A & 1) << 8) | (this.A >> 1);
	this.fnzc(this.tmp);
	this.A = this.tmp & 0xFF;
}


CPU6502.prototype.nop = function() { }

CPU6502.prototype.pha = function() {
	this.write(this.S + 0x100, this.A);
	this.S = (this.S - 1) & 0xFF;
	this.cycles++;
}

CPU6502.prototype.php = function() {
	var v = this.N << 7;
	v |= this.V << 6;
	v |= 3 << 4;
	v |= this.D << 3;
	v |= this.I << 2;
	v |= this.Z << 1;
	v |= this.C;
	this.write(this.S + 0x100, v);
	this.S = (this.S - 1) & 0xFF;
	this.cycles++;
}

CPU6502.prototype.pla = function() {
	this.S = (this.S + 1) & 0xFF;
	this.A = this.read(this.S + 0x100);
	this.fnz(this.A);
	this.cycles += 2;
}

CPU6502.prototype.plp = function() {
	this.S = (this.S + 1) & 0xFF;
	this.tmp = this.read(this.S + 0x100);
	this.N = ((this.tmp & 0x80) != 0) ? 1 : 0;
	this.V = ((this.tmp & 0x40) != 0) ? 1 : 0;
	this.D = ((this.tmp & 0x08) != 0) ? 1 : 0;
	this.I = ((this.tmp & 0x04) != 0) ? 1 : 0;
	this.Z = ((this.tmp & 0x02) != 0) ? 1 : 0;
	this.C = ((this.tmp & 0x01) != 0) ? 1 : 0;
	this.cycles += 2;
}

CPU6502.prototype.rti = function() {
	this.S = (this.S + 1) & 0xFF;
	this.tmp = this.read(this.S + 0x100);
	this.N = ((this.tmp & 0x80) != 0) ? 1 : 0;
	this.V = ((this.tmp & 0x40) != 0) ? 1 : 0;
	this.D = ((this.tmp & 0x08) != 0) ? 1 : 0;
	this.I = ((this.tmp & 0x04) != 0) ? 1 : 0;
	this.Z = ((this.tmp & 0x02) != 0) ? 1 : 0;
	this.C = ((this.tmp & 0x01) != 0) ? 1 : 0;
	this.S = (this.S + 1) & 0xFF;
	this.PC = this.read(this.S + 0x100);
	this.S = (this.S + 1) & 0xFF;
	this.PC |= this.read(this.S + 0x100) << 8;
	this.cycles += 4;
}

CPU6502.prototype.rts = function() {
	this.S = (this.S + 1) & 0xFF;
	this.PC = this.read(this.S + 0x100);
	this.S = (this.S + 1) & 0xFF;
	this.PC |= this.read(this.S + 0x100) << 8;
	this.PC++;
	this.cycles += 4;
}

CPU6502.prototype.sbc = function() {
	var v = this.read(this.addr);
	var c = 1 - this.C;
	var r = this.A - v - c;
	if (this.D) {
		var al = (this.A & 0x0F) - (v & 0x0F) - c;
		if (al < 0) al -= 6;
		var ah = (this.A >> 4) - (v >> 4) - ((al < 0) ? 1 : 0);
		this.Z = ((r & 0xFF) == 0) ? 1 : 0;
		this.N = ((r & 0x80) != 0) ? 1 : 0;
		this.V = (((this.A ^ v) & (this.A ^ r) & 0x80) != 0) ? 1 : 0;
		this.C = ((r & 0x100) != 0) ? 0 : 1;
		if (ah < 0) ah -= 6;
		this.A = ((ah << 4) | (al & 15)) & 0xFF;
	} else {
		this.Z = ((r & 0xFF) == 0) ? 1 : 0;
		this.N = ((r & 0x80) != 0) ? 1 : 0;
		this.V = (((this.A ^ v) & (this.A ^ r) & 0x80) != 0) ? 1 : 0;
		this.C = ((r & 0x100) != 0) ? 0 : 1;
		this.A = r & 0xFF;
	}
}


CPU6502.prototype.sec = function() { this.C = 1; }
CPU6502.prototype.sed = function() { this.D = 1; }
CPU6502.prototype.sei = function() { this.I = 1; }


CPU6502.prototype.slo = function() {
	this.tmp = this.read(this.addr) << 1;
	this.tmp |= this.A;
	this.fnzc(this.tmp);
	this.A = this.tmp & 0xFF;
}

CPU6502.prototype.sta = function() {
	this.write(this.addr, this.A);
}

CPU6502.prototype.stx = function() {
	this.write(this.addr, this.X);
}

CPU6502.prototype.sty = function() {
	this.write(this.addr, this.Y);
}

CPU6502.prototype.tax = function() {
	this.X = this.A;
	this.fnz(this.X);
}

CPU6502.prototype.tay = function() {
	this.Y = this.A;
	this.fnz(this.Y);
}

CPU6502.prototype.tsx = function() {
	this.X = this.S;
	this.fnz(this.X);
}

CPU6502.prototype.txa = function() {
	this.A = this.X;
	this.fnz(this.A);
}

CPU6502.prototype.txs = function() {
	this.S = this.X;
}

CPU6502.prototype.tya = function() {
	this.A = this.Y;
	this.fnz(this.A);
}

////////////////////////////////////////////////////////////////////////////////
// Opcode table
////////////////////////////////////////////////////////////////////////////////

var CPU6502op = new Array();

/*  BRK     */ CPU6502op[0x00] = function(m) { m.imp(); m.brk(); };
/*  ORA izx */ CPU6502op[0x01] = function(m) { m.izx(); m.ora(); };
/* *KIL     */ CPU6502op[0x02] = function(m) { m.imp(); m.kil(); };
/* *SLO izx */ CPU6502op[0x03] = function(m) { m.izx(); m.slo(); m.rmw(); };
/* *NOP zp  */ CPU6502op[0x04] = function(m) { m.zp(); m.nop(); };
/*  ORA zp  */ CPU6502op[0x05] = function(m) { m.zp(); m.ora(); };
/*  ASL zp  */ CPU6502op[0x06] = function(m) { m.zp(); m.asl(); m.rmw(); };
/* *SLO zp  */ CPU6502op[0x07] = function(m) { m.zp(); m.slo(); m.rmw(); };
/*  PHP     */ CPU6502op[0x08] = function(m) { m.imp(); m.php(); };
/*  ORA imm */ CPU6502op[0x09] = function(m) { m.imm(); m.ora(); };
/*  ASL     */ CPU6502op[0x0A] = function(m) { m.imp(); m.asla(); };
/* *ANC imm */ CPU6502op[0x0B] = function(m) { m.imm(); m.anc(); };
/* *NOP abs */ CPU6502op[0x0C] = function(m) { m.abs(); m.nop(); };
/*  ORA abs */ CPU6502op[0x0D] = function(m) { m.abs(); m.ora(); };
/*  ASL abs */ CPU6502op[0x0E] = function(m) { m.abs(); m.asl(); m.rmw(); };
/* *SLO abs */ CPU6502op[0x0F] = function(m) { m.abs(); m.slo(); m.rmw(); };

/*  BPL rel */ CPU6502op[0x10] = function(m) { m.rel(); m.bpl(); };
/*  ORA izy */ CPU6502op[0x11] = function(m) { m.izy(); m.ora(); };
/* *KIL     */ CPU6502op[0x12] = function(m) { m.imp(); m.kil(); };
/* *SLO izy */ CPU6502op[0x13] = function(m) { m.izy(); m.slo(); m.rmw(); };
/* *NOP zpx */ CPU6502op[0x14] = function(m) { m.zpx(); m.nop(); };
/*  ORA zpx */ CPU6502op[0x15] = function(m) { m.zpx(); m.ora(); };
/*  ASL zpx */ CPU6502op[0x16] = function(m) { m.zpx(); m.asl(); m.rmw(); };
/* *SLO zpx */ CPU6502op[0x17] = function(m) { m.zpx(); m.slo(); m.rmw(); };
/*  CLC     */ CPU6502op[0x18] = function(m) { m.imp(); m.clc(); };
/*  ORA aby */ CPU6502op[0x19] = function(m) { m.aby(); m.ora(); };
/* *NOP     */ CPU6502op[0x1A] = function(m) { m.imp(); m.nop(); };
/* *SLO aby */ CPU6502op[0x1B] = function(m) { m.aby(); m.slo(); m.rmw(); };
/* *NOP abx */ CPU6502op[0x1C] = function(m) { m.abx(); m.nop(); };
/*  ORA abx */ CPU6502op[0x1D] = function(m) { m.abx(); m.ora(); };
/*  ASL abx */ CPU6502op[0x1E] = function(m) { m.abx(); m.asl(); m.rmw(); };
/* *SLO abx */ CPU6502op[0x1F] = function(m) { m.abx(); m.slo(); m.rmw(); };

/*  JSR abs */ CPU6502op[0x20] = function(m) { m.abs(); m.jsr(); };
/*  AND izx */ CPU6502op[0x21] = function(m) { m.izx(); m.and(); };
/* *KIL     */ CPU6502op[0x22] = function(m) { m.imp(); m.kil(); };
/* *RLA izx */ CPU6502op[0x23] = function(m) { m.izx(); m.rla(); m.rmw(); };
/*  BIT zp  */ CPU6502op[0x24] = function(m) { m.zp(); m.bit(); };
/*  AND zp  */ CPU6502op[0x25] = function(m) { m.zp(); m.and(); };
/*  ROL zp  */ CPU6502op[0x26] = function(m) { m.zp(); m.rol(); m.rmw(); };
/* *RLA zp  */ CPU6502op[0x27] = function(m) { m.zp(); m.rla(); m.rmw(); };
/*  PLP     */ CPU6502op[0x28] = function(m) { m.imp(); m.plp(); };
/*  AND imm */ CPU6502op[0x29] = function(m) { m.imm(); m.and(); };
/*  ROL     */ CPU6502op[0x2A] = function(m) { m.imp(); m.rola(); };
/* *ANC imm */ CPU6502op[0x2B] = function(m) { m.imm(); m.anc(); };
/*  BIT abs */ CPU6502op[0x2C] = function(m) { m.abs(); m.bit(); };
/*  AND abs */ CPU6502op[0x2D] = function(m) { m.abs(); m.and(); };
/*  ROL abs */ CPU6502op[0x2E] = function(m) { m.abs(); m.rol(); m.rmw(); };
/* *RLA abs */ CPU6502op[0x2F] = function(m) { m.abs(); m.rla(); m.rmw(); };

/*  BMI rel */ CPU6502op[0x30] = function(m) { m.rel(); m.bmi(); };
/*  AND izy */ CPU6502op[0x31] = function(m) { m.izy(); m.and(); };
/* *KIL     */ CPU6502op[0x32] = function(m) { m.imp(); m.kil(); };
/* *RLA izy */ CPU6502op[0x33] = function(m) { m.izy(); m.rla(); m.rmw(); };
/* *NOP zpx */ CPU6502op[0x34] = function(m) { m.zpx(); m.nop(); };
/*  AND zpx */ CPU6502op[0x35] = function(m) { m.zpx(); m.and(); };
/*  ROL zpx */ CPU6502op[0x36] = function(m) { m.zpx(); m.rol(); m.rmw(); };
/* *RLA zpx */ CPU6502op[0x37] = function(m) { m.zpx(); m.rla(); m.rmw(); };
/*  SEC     */ CPU6502op[0x38] = function(m) { m.imp(); m.sec(); };
/*  AND aby */ CPU6502op[0x39] = function(m) { m.aby(); m.and(); };
/* *NOP     */ CPU6502op[0x3A] = function(m) { m.imp(); m.nop(); };
/* *RLA aby */ CPU6502op[0x3B] = function(m) { m.aby(); m.rla(); m.rmw(); };
/* *NOP abx */ CPU6502op[0x3C] = function(m) { m.abx(); m.nop(); };
/*  AND abx */ CPU6502op[0x3D] = function(m) { m.abx(); m.and(); };
/*  ROL abx */ CPU6502op[0x3E] = function(m) { m.abx(); m.rol(); m.rmw(); };
/* *RLA abx */ CPU6502op[0x3F] = function(m) { m.abx(); m.rla(); m.rmw(); };

/*  RTI     */ CPU6502op[0x40] = function(m) { m.imp(); m.rti(); };
/*  EOR izx */ CPU6502op[0x41] = function(m) { m.izx(); m.eor(); };
/* *KIL     */ CPU6502op[0x42] = function(m) { m.imp(); m.kil(); };
/* *SRE izx */ CPU6502op[0x43] = function(m) { m.izx(); m.sre(); m.rmw(); };
/* *NOP zp  */ CPU6502op[0x44] = function(m) { m.zp(); m.nop(); };
/*  EOR zp  */ CPU6502op[0x45] = function(m) { m.zp(); m.eor(); };
/*  LSR zp  */ CPU6502op[0x46] = function(m) { m.zp(); m.lsr(); m.rmw(); };
/* *SRE zp  */ CPU6502op[0x47] = function(m) { m.zp(); m.sre(); m.rmw(); };
/*  PHA     */ CPU6502op[0x48] = function(m) { m.imp(); m.pha(); };
/*  EOR imm */ CPU6502op[0x49] = function(m) { m.imm(); m.eor(); };
/*  LSR     */ CPU6502op[0x4A] = function(m) { m.imp(); m.lsra(); };
/* *ALR imm */ CPU6502op[0x4B] = function(m) { m.imm(); m.alr(); };
/*  JMP abs */ CPU6502op[0x4C] = function(m) { m.abs(); m.jmp(); };
/*  EOR abs */ CPU6502op[0x4D] = function(m) { m.abs(); m.eor(); };
/*  LSR abs */ CPU6502op[0x4E] = function(m) { m.abs(); m.lsr(); m.rmw(); };
/* *SRE abs */ CPU6502op[0x4F] = function(m) { m.abs(); m.sre(); m.rmw(); };

/*  BVC rel */ CPU6502op[0x50] = function(m) { m.rel(); m.bvc(); };
/*  EOR izy */ CPU6502op[0x51] = function(m) { m.izy(); m.eor(); };
/* *KIL     */ CPU6502op[0x52] = function(m) { m.imp(); m.kil(); };
/* *SRE izy */ CPU6502op[0x53] = function(m) { m.izy(); m.sre(); m.rmw(); };
/* *NOP zpx */ CPU6502op[0x54] = function(m) { m.zpx(); m.nop(); };
/*  EOR zpx */ CPU6502op[0x55] = function(m) { m.zpx(); m.eor(); };
/*  LSR zpx */ CPU6502op[0x56] = function(m) { m.zpx(); m.lsr(); m.rmw(); };
/* *SRE zpx */ CPU6502op[0x57] = function(m) { m.zpx(); m.sre(); m.rmw(); };
/*  CLI     */ CPU6502op[0x58] = function(m) { m.imp(); m.cli(); };
/*  EOR aby */ CPU6502op[0x59] = function(m) { m.aby(); m.eor(); };
/* *NOP     */ CPU6502op[0x5A] = function(m) { m.imp(); m.nop(); };
/* *SRE aby */ CPU6502op[0x5B] = function(m) { m.aby(); m.sre(); m.rmw(); };
/* *NOP abx */ CPU6502op[0x5C] = function(m) { m.abx(); m.nop(); };
/*  EOR abx */ CPU6502op[0x5D] = function(m) { m.abx(); m.eor(); };
/*  LSR abx */ CPU6502op[0x5E] = function(m) { m.abx(); m.lsr(); m.rmw(); };
/* *SRE abx */ CPU6502op[0x5F] = function(m) { m.abx(); m.sre(); m.rmw(); };

/*  RTS     */ CPU6502op[0x60] = function(m) { m.imp(); m.rts(); };
/*  ADC izx */ CPU6502op[0x61] = function(m) { m.izx(); m.adc(); };
/* *KIL     */ CPU6502op[0x62] = function(m) { m.imp(); m.kil(); };
/* *RRA izx */ CPU6502op[0x63] = function(m) { m.izx(); m.rra(); m.rmw(); };
/* *NOP zp  */ CPU6502op[0x64] = function(m) { m.zp(); m.nop(); };
/*  ADC zp  */ CPU6502op[0x65] = function(m) { m.zp(); m.adc(); };
/*  ROR zp  */ CPU6502op[0x66] = function(m) { m.zp(); m.ror(); m.rmw(); };
/* *RRA zp  */ CPU6502op[0x67] = function(m) { m.zp(); m.rra(); m.rmw(); };
/*  PLA     */ CPU6502op[0x68] = function(m) { m.imp(); m.pla(); };
/*  ADC imm */ CPU6502op[0x69] = function(m) { m.imm(); m.adc(); };
/*  ROR     */ CPU6502op[0x6A] = function(m) { m.imp(); m.rora(); };
/* *ARR imm */ CPU6502op[0x6B] = function(m) { m.imm(); m.arr(); };
/*  JMP ind */ CPU6502op[0x6C] = function(m) { m.ind(); m.jmp(); };
/*  ADC abs */ CPU6502op[0x6D] = function(m) { m.abs(); m.adc(); };
/*  ROR abs */ CPU6502op[0x6E] = function(m) { m.abs(); m.ror(); m.rmw(); };
/* *RRA abs */ CPU6502op[0x6F] = function(m) { m.abs(); m.rra(); m.rmw(); };

/*  BVS rel */ CPU6502op[0x70] = function(m) { m.rel(); m.bvs(); };
/*  ADC izy */ CPU6502op[0x71] = function(m) { m.izy(); m.adc(); };
/* *KIL     */ CPU6502op[0x72] = function(m) { m.imp(); m.kil(); };
/* *RRA izy */ CPU6502op[0x73] = function(m) { m.izy(); m.rra(); m.rmw(); };
/* *NOP zpx */ CPU6502op[0x74] = function(m) { m.zpx(); m.nop(); };
/*  ADC zpx */ CPU6502op[0x75] = function(m) { m.zpx(); m.adc(); };
/*  ROR zpx */ CPU6502op[0x76] = function(m) { m.zpx(); m.ror(); m.rmw(); };
/* *RRA zpx */ CPU6502op[0x77] = function(m) { m.zpx(); m.rra(); m.rmw(); };
/*  SEI     */ CPU6502op[0x78] = function(m) { m.imp(); m.sei(); };
/*  ADC aby */ CPU6502op[0x79] = function(m) { m.aby(); m.adc(); };
/* *NOP     */ CPU6502op[0x7A] = function(m) { m.imp(); m.nop(); };
/* *RRA aby */ CPU6502op[0x7B] = function(m) { m.aby(); m.rra(); m.rmw(); };
/* *NOP abx */ CPU6502op[0x7C] = function(m) { m.abx(); m.nop(); };
/*  ADC abx */ CPU6502op[0x7D] = function(m) { m.abx(); m.adc(); };
/*  ROR abx */ CPU6502op[0x7E] = function(m) { m.abx(); m.ror(); m.rmw(); };
/* *RRA abx */ CPU6502op[0x7F] = function(m) { m.abx(); m.rra(); m.rmw(); };

/* *NOP imm */ CPU6502op[0x80] = function(m) { m.imm(); m.nop(); };
/*  STA izx */ CPU6502op[0x81] = function(m) { m.izx(); m.sta(); };
/* *NOP imm */ CPU6502op[0x82] = function(m) { m.imm(); m.nop(); };
/* *SAX izx */ CPU6502op[0x83] = function(m) { m.izx(); m.sax(); };
/*  STY zp  */ CPU6502op[0x84] = function(m) { m.zp(); m.sty(); };
/*  STA zp  */ CPU6502op[0x85] = function(m) { m.zp(); m.sta(); };
/*  STX zp  */ CPU6502op[0x86] = function(m) { m.zp(); m.stx(); };
/* *SAX zp  */ CPU6502op[0x87] = function(m) { m.zp(); m.sax(); };
/*  DEY     */ CPU6502op[0x88] = function(m) { m.imp(); m.dey(); };
/* *NOP imm */ CPU6502op[0x89] = function(m) { m.imm(); m.nop(); };
/*  TXA     */ CPU6502op[0x8A] = function(m) { m.imp(); m.txa(); };
/* *XAA imm */ CPU6502op[0x8B] = function(m) { m.imm(); m.xaa(); };
/*  STY abs */ CPU6502op[0x8C] = function(m) { m.abs(); m.sty(); };
/*  STA abs */ CPU6502op[0x8D] = function(m) { m.abs(); m.sta(); };
/*  STX abs */ CPU6502op[0x8E] = function(m) { m.abs(); m.stx(); };
/* *SAX abs */ CPU6502op[0x8F] = function(m) { m.abs(); m.sax(); };

/*  BCC rel */ CPU6502op[0x90] = function(m) { m.rel(); m.bcc(); };
/*  STA izy */ CPU6502op[0x91] = function(m) { m.izy(); m.sta(); };
/* *KIL     */ CPU6502op[0x92] = function(m) { m.imp(); m.kil(); };
/* *AHX izy */ CPU6502op[0x93] = function(m) { m.izy(); m.ahx(); };
/*  STY zpx */ CPU6502op[0x94] = function(m) { m.zpx(); m.sty(); };
/*  STA zpx */ CPU6502op[0x95] = function(m) { m.zpx(); m.sta(); };
/*  STX zpy */ CPU6502op[0x96] = function(m) { m.zpy(); m.stx(); };
/* *SAX zpy */ CPU6502op[0x97] = function(m) { m.zpy(); m.sax(); };
/*  TYA     */ CPU6502op[0x98] = function(m) { m.imp(); m.tya(); };
/*  STA aby */ CPU6502op[0x99] = function(m) { m.aby(); m.sta(); };
/*  TXS     */ CPU6502op[0x9A] = function(m) { m.imp(); m.txs(); };
/* *TAS aby */ CPU6502op[0x9B] = function(m) { m.aby(); m.tas(); };
/* *SHY abx */ CPU6502op[0x9C] = function(m) { m.abx(); m.shy(); };
/*  STA abx */ CPU6502op[0x9D] = function(m) { m.abx(); m.sta(); };
/* *SHX aby */ CPU6502op[0x9E] = function(m) { m.aby(); m.shx(); };
/* *AHX aby */ CPU6502op[0x9F] = function(m) { m.aby(); m.ahx(); };

/*  LDY imm */ CPU6502op[0xA0] = function(m) { m.imm(); m.ldy(); };
/*  LDA izx */ CPU6502op[0xA1] = function(m) { m.izx(); m.lda(); };
/*  LDX imm */ CPU6502op[0xA2] = function(m) { m.imm(); m.ldx(); };
/* *LAX izx */ CPU6502op[0xA3] = function(m) { m.izx(); m.lax(); };
/*  LDY zp  */ CPU6502op[0xA4] = function(m) { m.zp(); m.ldy(); };
/*  LDA zp  */ CPU6502op[0xA5] = function(m) { m.zp(); m.lda(); };
/*  LDX zp  */ CPU6502op[0xA6] = function(m) { m.zp(); m.ldx(); };
/* *LAX zp  */ CPU6502op[0xA7] = function(m) { m.zp(); m.lax(); };
/*  TAY     */ CPU6502op[0xA8] = function(m) { m.imp(); m.tay(); };
/*  LDA imm */ CPU6502op[0xA9] = function(m) { m.imm(); m.lda(); };
/*  TAX     */ CPU6502op[0xAA] = function(m) { m.imp(); m.tax(); };
/* *LAX imm */ CPU6502op[0xAB] = function(m) { m.imm(); m.lax(); };
/*  LDY abs */ CPU6502op[0xAC] = function(m) { m.abs(); m.ldy(); };
/*  LDA abs */ CPU6502op[0xAD] = function(m) { m.abs(); m.lda(); };
/*  LDX abs */ CPU6502op[0xAE] = function(m) { m.abs(); m.ldx(); };
/* *LAX abs */ CPU6502op[0xAF] = function(m) { m.abs(); m.lax(); };

/*  BCS rel */ CPU6502op[0xB0] = function(m) { m.rel(); m.bcs(); };
/*  LDA izy */ CPU6502op[0xB1] = function(m) { m.izy(); m.lda(); };
/* *KIL     */ CPU6502op[0xB2] = function(m) { m.imp(); m.kil(); };
/* *LAX izy */ CPU6502op[0xB3] = function(m) { m.izy(); m.lax(); };
/*  LDY zpx */ CPU6502op[0xB4] = function(m) { m.zpx(); m.ldy(); };
/*  LDA zpx */ CPU6502op[0xB5] = function(m) { m.zpx(); m.lda(); };
/*  LDX zpy */ CPU6502op[0xB6] = function(m) { m.zpy(); m.ldx(); };
/* *LAX zpy */ CPU6502op[0xB7] = function(m) { m.zpy(); m.lax(); };
/*  CLV     */ CPU6502op[0xB8] = function(m) { m.imp(); m.clv(); };
/*  LDA aby */ CPU6502op[0xB9] = function(m) { m.aby(); m.lda(); };
/*  TSX     */ CPU6502op[0xBA] = function(m) { m.imp(); m.tsx(); };
/* *LAS aby */ CPU6502op[0xBB] = function(m) { m.aby(); m.las(); };
/*  LDY abx */ CPU6502op[0xBC] = function(m) { m.abx(); m.ldy(); };
/*  LDA abx */ CPU6502op[0xBD] = function(m) { m.abx(); m.lda(); };
/*  LDX aby */ CPU6502op[0xBE] = function(m) { m.aby(); m.ldx(); };
/* *LAX aby */ CPU6502op[0xBF] = function(m) { m.aby(); m.lax(); };

/*  CPY imm */ CPU6502op[0xC0] = function(m) { m.imm(); m.cpy(); };
/*  CMP izx */ CPU6502op[0xC1] = function(m) { m.izx(); m.cmp(); };
/* *NOP imm */ CPU6502op[0xC2] = function(m) { m.imm(); m.nop(); };
/* *DCP izx */ CPU6502op[0xC3] = function(m) { m.izx(); m.dcp(); m.rmw(); };
/*  CPY zp  */ CPU6502op[0xC4] = function(m) { m.zp(); m.cpy(); };
/*  CMP zp  */ CPU6502op[0xC5] = function(m) { m.zp(); m.cmp(); };
/*  DEC zp  */ CPU6502op[0xC6] = function(m) { m.zp(); m.dec(); m.rmw(); };
/* *DCP zp  */ CPU6502op[0xC7] = function(m) { m.zp(); m.dcp(); m.rmw(); };
/*  INY     */ CPU6502op[0xC8] = function(m) { m.imp(); m.iny(); };
/*  CMP imm */ CPU6502op[0xC9] = function(m) { m.imm(); m.cmp(); };
/*  DEX     */ CPU6502op[0xCA] = function(m) { m.imp(); m.dex(); };
/* *AXS imm */ CPU6502op[0xCB] = function(m) { m.imm(); m.axs(); };
/*  CPY abs */ CPU6502op[0xCC] = function(m) { m.abs(); m.cpy(); };
/*  CMP abs */ CPU6502op[0xCD] = function(m) { m.abs(); m.cmp(); };
/*  DEC abs */ CPU6502op[0xCE] = function(m) { m.abs(); m.dec(); m.rmw(); };
/* *DCP abs */ CPU6502op[0xCF] = function(m) { m.abs(); m.dcp(); m.rmw(); };

/*  BNE rel */ CPU6502op[0xD0] = function(m) { m.rel(); m.bne(); };
/*  CMP izy */ CPU6502op[0xD1] = function(m) { m.izy(); m.cmp(); };
/* *KIL     */ CPU6502op[0xD2] = function(m) { m.imp(); m.kil(); };
/* *DCP izy */ CPU6502op[0xD3] = function(m) { m.izy(); m.dcp(); m.rmw(); };
/* *NOP zpx */ CPU6502op[0xD4] = function(m) { m.zpx(); m.nop(); };
/*  CMP zpx */ CPU6502op[0xD5] = function(m) { m.zpx(); m.cmp(); };
/*  DEC zpx */ CPU6502op[0xD6] = function(m) { m.zpx(); m.dec(); m.rmw(); };
/* *DCP zpx */ CPU6502op[0xD7] = function(m) { m.zpx(); m.dcp(); m.rmw(); };
/*  CLD     */ CPU6502op[0xD8] = function(m) { m.imp(); m.cld(); };
/*  CMP aby */ CPU6502op[0xD9] = function(m) { m.aby(); m.cmp(); };
/* *NOP     */ CPU6502op[0xDA] = function(m) { m.imp(); m.nop(); };
/* *DCP aby */ CPU6502op[0xDB] = function(m) { m.aby(); m.dcp(); m.rmw(); };
/* *NOP abx */ CPU6502op[0xDC] = function(m) { m.abx(); m.nop(); };
/*  CMP abx */ CPU6502op[0xDD] = function(m) { m.abx(); m.cmp(); };
/*  DEC abx */ CPU6502op[0xDE] = function(m) { m.abx(); m.dec(); m.rmw(); };
/* *DCP abx */ CPU6502op[0xDF] = function(m) { m.abx(); m.dcp(); m.rmw(); };

/*  CPX imm */ CPU6502op[0xE0] = function(m) { m.imm(); m.cpx(); };
/*  SBC izx */ CPU6502op[0xE1] = function(m) { m.izx(); m.sbc(); };
/* *NOP imm */ CPU6502op[0xE2] = function(m) { m.imm(); m.nop(); };
/* *ISC izx */ CPU6502op[0xE3] = function(m) { m.izx(); m.isc(); m.rmw(); };
/*  CPX zp  */ CPU6502op[0xE4] = function(m) { m.zp(); m.cpx(); };
/*  SBC zp  */ CPU6502op[0xE5] = function(m) { m.zp(); m.sbc(); };
/*  INC zp  */ CPU6502op[0xE6] = function(m) { m.zp(); m.inc(); m.rmw(); };
/* *ISC zp  */ CPU6502op[0xE7] = function(m) { m.zp(); m.isc(); m.rmw(); };
/*  INX     */ CPU6502op[0xE8] = function(m) { m.imp(); m.inx(); };
/*  SBC imm */ CPU6502op[0xE9] = function(m) { m.imm(); m.sbc(); };
/*  NOP     */ CPU6502op[0xEA] = function(m) { m.imp(); m.nop(); };
/* *SBC imm */ CPU6502op[0xEB] = function(m) { m.imm(); m.sbc(); };
/*  CPX abs */ CPU6502op[0xEC] = function(m) { m.abs(); m.cpx(); };
/*  SBC abs */ CPU6502op[0xED] = function(m) { m.abs(); m.sbc(); };
/*  INC abs */ CPU6502op[0xEE] = function(m) { m.abs(); m.inc(); m.rmw(); };
/* *ISC abs */ CPU6502op[0xEF] = function(m) { m.abs(); m.isc(); m.rmw(); };

/*  BEQ rel */ CPU6502op[0xF0] = function(m) { m.rel(); m.beq(); };
/*  SBC izy */ CPU6502op[0xF1] = function(m) { m.izy(); m.sbc(); };
/* *KIL     */ CPU6502op[0xF2] = function(m) { m.imp(); m.kil(); };
/* *ISC izy */ CPU6502op[0xF3] = function(m) { m.izy(); m.isc(); m.rmw(); };
/* *NOP zpx */ CPU6502op[0xF4] = function(m) { m.zpx(); m.nop(); };
/*  SBC zpx */ CPU6502op[0xF5] = function(m) { m.zpx(); m.sbc(); };
/*  INC zpx */ CPU6502op[0xF6] = function(m) { m.zpx(); m.inc(); m.rmw(); };
/* *ISC zpx */ CPU6502op[0xF7] = function(m) { m.zpx(); m.isc(); m.rmw(); };
/*  SED     */ CPU6502op[0xF8] = function(m) { m.imp(); m.sed(); };
/*  SBC aby */ CPU6502op[0xF9] = function(m) { m.aby(); m.sbc(); };
/* *NOP     */ CPU6502op[0xFA] = function(m) { m.imp(); m.nop(); };
/* *ISC aby */ CPU6502op[0xFB] = function(m) { m.aby(); m.isc(); m.rmw(); };
/* *NOP abx */ CPU6502op[0xFC] = function(m) { m.abx(); m.nop(); };
/*  SBC abx */ CPU6502op[0xFD] = function(m) { m.abx(); m.sbc(); };
/*  INC abx */ CPU6502op[0xFE] = function(m) { m.abx(); m.inc(); m.rmw(); };
/* *ISC abx */ CPU6502op[0xFF] = function(m) { m.abx(); m.isc(); m.rmw(); };

////////////////////////////////////////////////////////////////////////////////
// CPU instantiation
////////////////////////////////////////////////////////////////////////////////

PROG = [
    0x02, 0x80, // RAM ADDR
0xA9, 0xFF, 0x48, 0xA9, 0x00, 0x48, 0xA9, 0x2D,
0x85, 0x06, 0xA9, 0x03, 0x85, 0x07, 0x20, 0x15,
0x03, 0xA0, 0x00, 0xB1, 0x06, 0xF0, 0x1B, 0x4A,
0x4A, 0x4A, 0x4A, 0xAA, 0xB1, 0x06, 0x29, 0x0F,
0xA8, 0xB9, 0x1D, 0x03, 0x20, 0xEF, 0xFF, 0xCA,
0xD0, 0xFA, 0xE6, 0x06, 0xD0, 0xE3, 0xE6, 0x07,
0xD0, 0xDF, 0xC8, 0x38, 0xA9, 0x28, 0xF1, 0x06,
0x4A, 0xAA, 0xA9, 0xA0, 0x20, 0xEF, 0xFF, 0xCA,
0xD0, 0xFA, 0xB1, 0x06, 0xAA, 0xC8, 0xB1, 0x06,
0x20, 0xEF, 0xFF, 0xCA, 0xD0, 0xF7, 0xC8, 0x98,
0x18, 0x65, 0x06, 0x85, 0x06, 0xA9, 0x00, 0x65,
0x07, 0x85, 0x07, 0xA9, 0x10, 0x20, 0xEB, 0x02,
0x20, 0x15, 0x03, 0xA0, 0x00, 0xB1, 0x06, 0xF0,
0x9D, 0xD0, 0xA3, 0x48, 0x8A, 0x48, 0x98, 0x48,
0xA0, 0xFF, 0xA2, 0xFF, 0xAD, 0x11, 0xD0, 0x10,
0x09, 0x68, 0xA8, 0x68, 0xAA, 0x68, 0xAD, 0x10,
0xD0, 0x60, 0xCA, 0xD0, 0xEF, 0x88, 0xD0, 0xEA,
0x68, 0xA8, 0x68, 0xAA, 0x68, 0x38, 0xE9, 0x01,
0xD0, 0xD9, 0xA9, 0x00, 0x60, 0x48, 0xA9, 0x8D,
0x20, 0xEF, 0xFF, 0x68, 0x60, 0xA0, 0xAE, 0xBA,
0xAC, 0xBB, 0xA1, 0xAD, 0xDE, 0xAB, 0xBD, 0xBF,
0xA6, 0xAA, 0xA5, 0xA3, 0xC0, 0xFF, 0x1F, 0x1B,
0x17, 0x16, 0x14, 0x13, 0x14, 0x17, 0x1B, 0x1E,
0xFF, 0xCF, 0x1E, 0x2C, 0x18, 0x50, 0x21, 0x12,
0x14, 0x17, 0x1C, 0xFF, 0x8F, 0x1B, 0x16, 0x12,
0x21, 0x70, 0x31, 0x10, 0x11, 0x18, 0xFF, 0x5F,
0x1D, 0x15, 0x50, 0x21, 0x70, 0x41, 0x18, 0x1D,
0xFF, 0x2F, 0x1E, 0x14, 0xF0, 0x30, 0x11, 0x10,
0x12, 0x17, 0x1E, 0xFF, 0x19, 0xE0, 0x11, 0x12,
0x24, 0x12, 0x40, 0x19, 0xFF, 0x14, 0x50, 0x23,
0x11, 0x20, 0x21, 0x20, 0x12, 0x15, 0x18, 0x19,
0x16, 0x12, 0x30, 0x12, 0x19, 0xDF, 0x1C, 0x11,
0x40, 0x12, 0x19, 0x1A, 0x17, 0x25, 0x26, 0x34,
0x17, 0x2A, 0x19, 0x17, 0x13, 0x30, 0x11, 0x1B,
0xCF, 0x18, 0x50, 0x13, 0x2A, 0x19, 0x38, 0x19,
0x18, 0x27, 0x28, 0x27, 0x18, 0x17, 0x12, 0x30,
0x18, 0xCF, 0x1A, 0x50, 0x15, 0x19, 0x17, 0x14,
0x13, 0x22, 0x13, 0x16, 0x17, 0x16, 0x13, 0x21,
0x12, 0x14, 0x17, 0x15, 0x20, 0x13, 0x1D, 0xCF,
0x1C, 0x40, 0x12, 0x28, 0x15, 0x13, 0x11, 0x30,
0x12, 0x28, 0x12, 0x10, 0x11, 0x12, 0x14, 0x17,
0x18, 0x12, 0x10, 0x1A, 0xDF, 0x1D, 0x12, 0x30,
0x14, 0x1A, 0x19, 0x18, 0x17, 0x45, 0x16, 0x1B,
0x1D, 0x18, 0x26, 0x17, 0x18, 0x1A, 0x1B, 0x15,
0x11, 0x1C, 0xEF, 0x18, 0x10, 0x13, 0x12, 0x13,
0x59, 0x18, 0x27, 0x19, 0x1B, 0x2C, 0x1A, 0x27,
0x19, 0x2A, 0x17, 0x12, 0x18, 0xEF, 0x1E, 0x12,
0x23, 0x11, 0x15, 0x16, 0x35, 0x24, 0x35, 0x16,
0x17, 0x16, 0x14, 0x13, 0x14, 0x15, 0x16, 0x15,
0x11, 0x18, 0xFF, 0x17, 0x30, 0x12, 0x24, 0x13,
0x21, 0x23, 0x11, 0x10, 0x21, 0x22, 0x21, 0x13,
0x14, 0x12, 0x13, 0x1D, 0xFF, 0x1D, 0x16, 0x11,
0x10, 0x21, 0x22, 0x11, 0x22, 0x13, 0x24, 0x25,
0x14, 0x23, 0x41, 0x1A, 0xFF, 0x2F, 0x1D, 0x16,
0x15, 0x20, 0x31, 0x13, 0x24, 0x15, 0x16, 0x47,
0x13, 0x11, 0x10, 0x12, 0x19, 0xFF, 0x2F, 0x1D,
0x1A, 0x1C, 0x19, 0x13, 0x11, 0x20, 0x21, 0x13,
0x24, 0x33, 0x24, 0x21, 0x13, 0x1A, 0xEF, 0x2E,
0x1D, 0x1C, 0x1B, 0x1D, 0x1E, 0x1B, 0x16, 0x13,
0x51, 0x12, 0x41, 0x12, 0x21, 0x12, 0x18, 0x1A,
0x1D, 0xAF, 0x1E, 0x1D, 0x3C, 0x2D, 0x4E, 0x1A,
0x14, 0x22, 0x11, 0x20, 0x71, 0x13, 0x15, 0x17,
0x2C, 0x1D, 0x1E, 0x7F, 0x4D, 0x2E, 0x2D, 0x2E,
0x1D, 0x2E, 0x19, 0x23, 0x32, 0x31, 0x22, 0x13,
0x15, 0x16, 0x14, 0x17, 0x2E, 0x3D, 0x2E, 0x4F,
0x2E, 0x7D, 0x2E, 0x1D, 0x2E, 0x1A, 0x14, 0x43,
0x14, 0x13, 0x14, 0x15, 0x16, 0x17, 0x15, 0x14,
0x18, 0x1D, 0x4E, 0x2D, 0x4E, 0x9D, 0x4E, 0x1C,
0x1A, 0x18, 0x15, 0x14, 0x43, 0x15, 0x26, 0x15,
0x13, 0x16, 0x1A, 0x3E, 0x8D, 0x00, 0x04, 0x57,
0x4F, 0x5A, 0x20, 0x8F, 0x1E, 0x1B, 0x18, 0x15,
0x34, 0x15, 0x17, 0x18, 0x19, 0x1B, 0x1D, 0x1E,
0xFF, 0x7F, 0x1E, 0x1A, 0x17, 0x14, 0x11, 0x40,
0x21, 0x30, 0x31, 0x12, 0x16, 0x1C, 0xFF, 0x4F,
0x1C, 0x16, 0x11, 0x50, 0x21, 0x20, 0x11, 0x12,
0x11, 0x50, 0x11, 0x17, 0x1D, 0xFF, 0x1F, 0x1B,
0x14, 0xA0, 0x21, 0x12, 0x11, 0x20, 0x21, 0x30,
0x13, 0x1A, 0xEF, 0x19, 0x11, 0xA0, 0x11, 0x12,
0x15, 0x17, 0x13, 0x20, 0x51, 0x10, 0x11, 0x17,
0x1E, 0xBF, 0x1A, 0xB0, 0x11, 0x12, 0x13, 0x15,
0x18, 0x15, 0x30, 0x61, 0x10, 0x16, 0x1E, 0xAF,
0x18, 0xA0, 0x11, 0x12, 0x14, 0x25, 0x1A, 0x19,
0x13, 0x40, 0x41, 0x20, 0x18, 0xAF, 0x16, 0x90,
0x11, 0x12, 0x14, 0x27, 0x16, 0x18, 0x1A, 0x16,
0x11, 0x90, 0x15, 0xAF, 0x16, 0x70, 0x11, 0x12,
0x23, 0x24, 0x13, 0x32, 0x23, 0x11, 0x80, 0x13,
0x1E, 0x9F, 0x18, 0x50, 0x31, 0x12, 0x13, 0x14,
0x13, 0x11, 0x40, 0x12, 0x14, 0x15, 0x14, 0x13,
0x11, 0x50, 0x11, 0x1C, 0x9F, 0x1A, 0x40, 0x31,
0x20, 0x12, 0x18, 0x17, 0x13, 0x12, 0x21, 0x12,
0x16, 0x19, 0x1A, 0x1B, 0x1A, 0x18, 0x13, 0x50,
0x16, 0x1E, 0x8F, 0x1C, 0x11, 0x20, 0x11, 0x14,
0x23, 0x22, 0x14, 0x1B, 0x1D, 0x1A, 0x18, 0x27,
0x18, 0x19, 0x4B, 0x1A, 0x18, 0x13, 0x40, 0x11,
0x18, 0x9F, 0x17, 0x20, 0x11, 0x17, 0x19, 0x37,
0x16, 0x1A, 0x2E, 0x1B, 0x28, 0x49, 0x48, 0x17,
0x15, 0x14, 0x11, 0x20, 0x17, 0x9F, 0x1D, 0x15,
0x20, 0x16, 0x48, 0x26, 0x29, 0x18, 0x47, 0x18,
0x27, 0x38, 0x19, 0x17, 0x13, 0x11, 0x20, 0x1A,
0xAF, 0x1E, 0x15, 0x10, 0x12, 0x26, 0x17, 0x18,
0x17, 0x14, 0x23, 0x14, 0x27, 0x15, 0x14, 0x16,
0x27, 0x48, 0x15, 0x40, 0x15, 0x1E, 0xAF, 0x1E,
0x15, 0x10, 0x14, 0x27, 0x16, 0x15, 0x14, 0x13,
0x12, 0x13, 0x25, 0x14, 0x13, 0x15, 0x16, 0x37,
0x18, 0x17, 0x15, 0x11, 0x20, 0x12, 0x15, 0x1C,
0xBF, 0x1C, 0x12, 0x11, 0x26, 0x15, 0x23, 0x24,
0x13, 0x14, 0x15, 0x26, 0x25, 0x36, 0x15, 0x14,
0x17, 0x14, 0x20, 0x12, 0x16, 0x1A, 0xCF, 0x1A,
0x22, 0x25, 0x14, 0x25, 0x14, 0x13, 0x15, 0x16,
0x27, 0x26, 0x15, 0x14, 0x13, 0x12, 0x15, 0x18,
0x17, 0x11, 0x10, 0x11, 0x14, 0x17, 0x1B, 0xCF,
0x1B, 0x16, 0x24, 0x25, 0x26, 0x25, 0x46, 0x14,
0x13, 0x22, 0x13, 0x16, 0x28, 0x13, 0x10, 0x11,
0x13, 0x15, 0x17, 0x1C, 0xCF, 0x1D, 0x14, 0x22,
0x14, 0x15, 0x24, 0x53, 0x32, 0x13, 0x15, 0x16,
0x17, 0x18, 0x14, 0x21, 0x13, 0x25, 0x19, 0xCF,
0x1B, 0x23, 0x21, 0x12, 0x93, 0x24, 0x15, 0x16,
0x27, 0x13, 0x11, 0x12, 0x14, 0x15, 0x16, 0x19,
0x1B, 0x1E, 0xAF, 0x19, 0x13, 0x14, 0x13, 0x32,
0x33, 0x14, 0x23, 0x34, 0x35, 0x16, 0x15, 0x13,
0x12, 0x13, 0x25, 0x17, 0x28, 0x1C, 0x1E, 0x1D,
0x1E, 0x4F, 0x2E, 0x1D, 0x19, 0x15, 0x34, 0x33,
0x94, 0x35, 0x14, 0x13, 0x14, 0x16, 0x25, 0x17,
0x19, 0x1D, 0x2E, 0x1D, 0x1E, 0x00, 0x0B, 0x53,
0x54, 0x45, 0x56, 0x45, 0x20, 0x4A, 0x4F, 0x42,
0x53, 0x20, 0xFF, 0xAF, 0x27, 0xFF, 0xFF, 0x5F,
0x57, 0xFF, 0xFF, 0x4F, 0x57, 0xFF, 0xFF, 0x4F,
0x57, 0xFF, 0xFF, 0x4F, 0x57, 0xFF, 0xDF, 0x37,
0x4F, 0x27, 0x4F, 0x47, 0xFF, 0x4F, 0xF7, 0xA7,
0xDF, 0xF7, 0xD7, 0xBF, 0xFC, 0xCC, 0xCF, 0xFC,
0xCC, 0xDF, 0xFC, 0xBC, 0xDF, 0xF8, 0xC8, 0xDF,
0xF8, 0xC8, 0xDF, 0xF8, 0xD8, 0xDF, 0xF4, 0xD4,
0xCF, 0xF4, 0xE4, 0xCF, 0xF4, 0xF4, 0xAF, 0xF3,
0xF3, 0xBF, 0xF3, 0xD3, 0xDF, 0xF3, 0xB3, 0xFF,
0x1F, 0xF4, 0x84, 0xFF, 0x3F, 0x84, 0x4F, 0x84,
0xFF, 0xFF, 0xFF, 0x5F, 0x00, 0x1B, 0x48, 0x41,
0x50, 0x50, 0x59, 0x20, 0x33, 0x30, 0x54, 0x48,
0x20, 0x42, 0x49, 0x52, 0x54, 0x48, 0x44, 0x41,
0x59, 0x20, 0x41, 0x50, 0x50, 0x4C, 0x45, 0x21,
0x20, 0xFF, 0xAF, 0x1E, 0x19, 0x15, 0x13, 0x14,
0x19, 0x1D, 0xFF, 0xFF, 0x2F, 0x1E, 0x18, 0x13,
0x31, 0x13, 0x17, 0x1D, 0xEF, 0x1E, 0x1D, 0x1C,
0x1D, 0xDF, 0x1C, 0x16, 0x22, 0x24, 0x13, 0x15,
0x1A, 0xDF, 0x1C, 0x17, 0x12, 0x11, 0x15, 0x1A,
0xCF, 0x1D, 0x18, 0x25, 0x28, 0x27, 0x19, 0x1E,
0xBF, 0x1C, 0x16, 0x11, 0x10, 0x11, 0x12, 0x15,
0x1A, 0xCF, 0x1C, 0x19, 0x27, 0x18, 0x27, 0x19,
0x1D, 0xBF, 0x1A, 0x15, 0x14, 0x15, 0x17, 0x26,
0x18, 0x1C, 0xCF, 0x1B, 0x16, 0x24, 0x25, 0x18,
0x1C, 0xBF, 0x1B, 0x17, 0x15, 0x16, 0x18, 0x17,
0x18, 0x1A, 0x1E, 0xCF, 0x1C, 0x17, 0x14, 0x13,
0x14, 0x15, 0x18, 0x1B, 0xBF, 0x1D, 0x18, 0x45,
0x17, 0x1B, 0x1E, 0xCF, 0x1E, 0x1C, 0x19, 0x27,
0x19, 0x1B, 0x1E, 0xCF, 0x1B, 0x15, 0x22, 0x13,
0x17, 0x1C, 0xFF, 0x1F, 0x2D, 0x1E, 0xEF, 0x1E,
0x19, 0x13, 0x11, 0x14, 0x19, 0x1E, 0xAF, 0x2E,
0xAF, 0x3E, 0x5F, 0x4E, 0x1B, 0x17, 0x14, 0x16,
0x1A, 0x1D, 0xAF, 0x1E, 0x1D, 0x1E, 0x8F, 0x1E,
0x3D, 0x1E, 0x3F, 0x1E, 0x4D, 0x1C, 0x2B, 0x1A,
0x1B, 0x1C, 0x2D, 0x2E, 0x5F, 0x1E, 0x2D, 0x1E,
0x7F, 0x1E, 0x1D, 0x2C, 0x1D, 0x2E, 0x1F, 0x1E,
0x3D, 0x6E, 0x5D, 0x1E, 0x6F, 0x1D, 0x1C, 0x1D,
0x1E, 0x3F, 0x2E, 0x1F, 0x1E, 0x1D, 0x2C, 0x1D,
0x3E, 0x5D, 0x9E, 0x1D, 0x6C, 0x1B, 0x1A, 0x39,
0x2A, 0x19, 0x1A, 0x1C, 0x2E, 0x1D, 0x2B, 0x1C,
0x1E, 0x2F, 0x1E, 0x7D, 0x3E, 0x2D, 0x1E, 0x1D,
0x1A, 0x17, 0x25, 0x16, 0x55, 0x14, 0x25, 0x16,
0x18, 0x1B, 0x1E, 0x1F, 0x1D, 0x2B, 0x1C, 0x1D,
0x3E, 0x2D, 0x1C, 0x1B, 0x2C, 0x1D, 0x1E, 0x1F,
0x1E, 0x2D, 0x1C, 0x1B, 0x18, 0x16, 0x15, 0x84,
0x25, 0x16, 0x18, 0x1B, 0x1E, 0x1F, 0x1E, 0x3C,
0x1D, 0x1E, 0x1C, 0x3D, 0x3C, 0x1D, 0x1E, 0x3F,
0x1E, 0x1D, 0x1B, 0x19, 0x18, 0x17, 0x16, 0x15,
0x24, 0x25, 0x44, 0x23, 0x16, 0x1A, 0x1D, 0x3F,
0x1E, 0x2D, 0x1C, 0x1D, 0x2C, 0x2D, 0x4E, 0x2F,
0x1D, 0x1B, 0x19, 0x18, 0x27, 0x15, 0x14, 0x13,
0x14, 0x26, 0x14, 0x33, 0x12, 0x13, 0x14, 0x17,
0x1A, 0x1C, 0x1D, 0x3E, 0x4D, 0x1B, 0x19, 0x1A,
0x1B, 0x1D, 0x3E, 0x1D, 0x1C, 0x19, 0x17, 0x16,
0x17, 0x38, 0x17, 0x16, 0x17, 0x18, 0x29, 0x17,
0x26, 0x15, 0x16, 0x27, 0x38, 0x19, 0x1A, 0x1D,
0x4F, 0x1D, 0x1B, 0x39, 0x1A, 0x49, 0x38, 0x19,
0x1A, 0x1C, 0x1E, 0x1F, 0x2E, 0x1F, 0x1E, 0x1D,
0x1B, 0x3A, 0x19, 0x18, 0x27, 0x18, 0x19, 0x1A,
0x1C, 0x1E, 0x5F, 0x1D, 0x1A, 0x18, 0x27, 0x18,
0x29, 0x3A, 0x19, 0x18, 0x1A, 0x1D, 0x6F, 0x1C,
0x19, 0x18, 0x69, 0x1A, 0x1B, 0x1A, 0x1B, 0x1D,
0x5F, 0x1D, 0x19, 0x16, 0x15, 0x56, 0x15, 0x14,
0x12, 0x13, 0x16, 0x1C, 0x6F, 0x1E, 0x19, 0x15,
0x23, 0x44, 0x35, 0x16, 0x1A, 0x1E, 0x4F, 0x1E,
0x18, 0x13, 0x10, 0x21, 0x12, 0x23, 0x12, 0x11,
0x10, 0x11, 0x15, 0x1B, 0x7F, 0x1A, 0x15, 0x42,
0x23, 0x14, 0x15, 0x16, 0x18, 0x1B, 0x1E, 0x2F,
0x00, 0x1D, 0x57, 0x4F, 0x5A, 0x20, 0x41, 0x4E,
0x44, 0x20, 0x4A, 0x4F, 0x42, 0x53, 0x20, 0x48,
0x4F, 0x4C, 0x44, 0x49, 0x4E, 0x47, 0x20, 0x41,
0x50, 0x50, 0x4C, 0x45, 0x20, 0x49, 0x20, 0xFF,
0x3F, 0x3E, 0xFF, 0xFF, 0x5F, 0x1E, 0x7D, 0x1E,
0xFF, 0xEF, 0x1E, 0x3D, 0x6E, 0x4D, 0x1E, 0xFF,
0x8F, 0x1E, 0x2D, 0xEE, 0x3D, 0x2E, 0xFF, 0x2F,
0x1E, 0x1D, 0xFE, 0x4E, 0x5D, 0x1E, 0xCF, 0x1E,
0x1D, 0xFE, 0x7E, 0x3D, 0x1B, 0x19, 0x9F, 0x1C,
0x2D, 0x6E, 0x1D, 0x1E, 0x3F, 0x2E, 0x2F, 0x7E,
0x1D, 0x1E, 0x1D, 0x1A, 0x17, 0x15, 0x1E, 0x7F,
0x1E, 0x1C, 0x2A, 0x1C, 0x1D, 0x3E, 0x19, 0x16,
0x18, 0x19, 0x1C, 0x1E, 0x4F, 0x1E, 0x1F, 0x6E,
0x1C, 0x19, 0x16, 0x14, 0x16, 0x7F, 0x2D, 0x3E,
0x1C, 0x3B, 0x1D, 0x1B, 0x1A, 0x18, 0x37, 0x1A,
0x1F, 0x4E, 0x1F, 0x4E, 0x1B, 0x18, 0x25, 0x16,
0x17, 0x5F, 0x1E, 0x3D, 0x19, 0x14, 0x18, 0x1C,
0x2E, 0x1D, 0x3B, 0x1C, 0x1B, 0x2A, 0x1D, 0x8E,
0x1F, 0x1B, 0x16, 0x14, 0x15, 0x27, 0x18, 0x4F,
0x1E, 0x1D, 0x1E, 0x1D, 0x15, 0x30, 0x11, 0x14,
0x19, 0x1C, 0x1E, 0x1F, 0x1D, 0x1C, 0x2B, 0x1C,
0x8E, 0x1F, 0x1E, 0x18, 0x14, 0x16, 0x47, 0x3F,
0x2D, 0x1E, 0x1B, 0x14, 0x10, 0x41, 0x20, 0x11,
0x14, 0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x3B,
0x1D, 0x2E, 0x2F, 0x1E, 0x19, 0x26, 0x37, 0x15,
0x1B, 0x1F, 0x1E, 0x3D, 0x1E, 0x1A, 0x11, 0x30,
0x51, 0x20, 0x11, 0x14, 0x18, 0x1C, 0x1E, 0x1F,
0x1E, 0x1C, 0x1B, 0x1A, 0x1B, 0x1C, 0x1D, 0x1A,
0x16, 0x37, 0x16, 0x15, 0x1C, 0x2F, 0x1C, 0x16,
0x19, 0x1D, 0x2E, 0x1D, 0x13, 0x31, 0x10, 0x71,
0x10, 0x11, 0x14, 0x18, 0x1C, 0x1E, 0x1F, 0x1E,
0x1D, 0x1C, 0x19, 0x47, 0x26, 0x1D, 0x4F, 0x1D,
0x16, 0x12, 0x17, 0x1B, 0x1E, 0x1A, 0x14, 0x51,
0x10, 0x11, 0x12, 0x61, 0x1B, 0x2D, 0x1E, 0x1F,
0x1C, 0x47, 0x15, 0x17, 0x8F, 0x1A, 0x14, 0x12,
0x14, 0x1A, 0x1D, 0x1C, 0x17, 0x13, 0x21, 0x12,
0x11, 0x20, 0x22, 0x21, 0x1C, 0x1F, 0x3E, 0x1B,
0x47, 0x15, 0x19, 0xBF, 0x1D, 0x17, 0x23, 0x17,
0x1C, 0x1D, 0x1B, 0x16, 0x12, 0x11, 0x12, 0x11,
0x20, 0x14, 0x1E, 0x1F, 0x2E, 0x1F, 0x1B, 0x47,
0x15, 0x1B, 0xFF, 0x1B, 0x15, 0x12, 0x14, 0x19,
0x2D, 0x1A, 0x2E, 0x1A, 0x17, 0x1E, 0x1F, 0x2E,
0x1F, 0x1C, 0x37, 0x16, 0x15, 0x1C, 0xFF, 0x3F,
0x1E, 0x18, 0x23, 0x16, 0x1B, 0x1D, 0x1E, 0x2F,
0x3E, 0x1F, 0x1C, 0x37, 0x26, 0x1E, 0xFF, 0x7F,
0x1C, 0x16, 0x12, 0x13, 0x17, 0x1C, 0x1E, 0x1F,
0x1E, 0x1F, 0x1D, 0x37, 0x15, 0x17, 0xFF, 0xBF,
0x1E, 0x19, 0x14, 0x12, 0x14, 0x19, 0x2C, 0x18,
0x27, 0x15, 0x19, 0xFF, 0xFF, 0x1D, 0x17, 0x12,
0x11, 0x12, 0x23, 0x14, 0x1B, 0xFF, 0xFF, 0x4F,
0x1B, 0x19, 0x28, 0x1C, 0xEF, 0x00, 0x09, 0x41,
0x50, 0x50, 0x4C, 0x45, 0x20, 0x49, 0x49, 0x20,
0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0x1E, 0xFF, 0x7F,
0x1E, 0x6D, 0x7C, 0x3B, 0x1A, 0x1D, 0xFF, 0x6F,
0x1D, 0x15, 0x14, 0x35, 0xA4, 0x2A, 0x1D, 0xFF,
0x6F, 0x1D, 0x15, 0x18, 0x39, 0x2A, 0x79, 0x14,
0x1A, 0x19, 0x1D, 0xFF, 0x6F, 0x1C, 0x14, 0x18,
0x19, 0x1A, 0x1B, 0x19, 0x1A, 0x1B, 0x39, 0x3A,
0x14, 0x29, 0x1D, 0xFF, 0x5F, 0x1E, 0x1B, 0x14,
0x29, 0x1A, 0x19, 0x16, 0x18, 0x19, 0x17, 0x16,
0x17, 0x28, 0x1A, 0x14, 0x28, 0x1D, 0xFF, 0x5F,
0x1E, 0x1A, 0x14, 0x28, 0x39, 0x68, 0x19, 0x1A,
0x14, 0x28, 0x1D, 0xFF, 0x5F, 0x1E, 0x1A, 0x14,
0x28, 0x39, 0x7A, 0x19, 0x14, 0x18, 0x17, 0x1D,
0xFF, 0x5F, 0x1D, 0x19, 0x13, 0x26, 0x55, 0x46,
0x25, 0x13, 0x18, 0x17, 0x1C, 0xFF, 0x5F, 0x1D,
0x19, 0x1A, 0x19, 0x28, 0x47, 0x16, 0x57, 0x18,
0x1A, 0x16, 0x1C, 0xFF, 0x5F, 0x1C, 0x19, 0x3A,
0x79, 0x58, 0x17, 0x16, 0x1C, 0xFF, 0x5F, 0x1B,
0x68, 0x57, 0x36, 0x25, 0x26, 0x1C, 0xFF, 0x5F,
0x1B, 0xD7, 0x36, 0x17, 0x16, 0x1C, 0xFF, 0x5F,
0x1A, 0x17, 0x16, 0x47, 0x86, 0x17, 0x26, 0x15,
0x1B, 0xFF, 0x5F, 0x19, 0x65, 0x74, 0x55, 0x1A,
0x1D, 0x1E, 0x8F, 0x1D, 0x7C, 0x2B, 0x17, 0x44,
0x13, 0x14, 0x53, 0x15, 0x16, 0x13, 0x22, 0x13,
0x14, 0x1D, 0x1F, 0x1E, 0x1D, 0x1E, 0x5F, 0x1D,
0x27, 0x36, 0x65, 0x34, 0x23, 0x14, 0x43, 0x14,
0x1A, 0x1C, 0x14, 0x10, 0x11, 0x12, 0x13, 0x1D,
0x3F, 0x1D, 0x1E, 0x4F, 0x1B, 0x16, 0x17, 0x15,
0x17, 0x15, 0x16, 0x17, 0x36, 0x15, 0x54, 0x53,
0x14, 0x1A, 0x1C, 0x16, 0x11, 0x13, 0x14, 0x17,
0x1F, 0x1E, 0x3F, 0x1E, 0x4F, 0x1E, 0x1D, 0x1A,
0x19, 0x1A, 0x99, 0x58, 0x27, 0x18, 0x3B, 0x18,
0x17, 0x1B, 0x5D, 0x1B, 0x19, 0x1B, 0x1F, 0x1E,
0x19, 0x48, 0x19, 0x88, 0x77, 0x56, 0x25, 0x1A,
0x1D, 0x1A, 0x19, 0x1A, 0x1B, 0x1A, 0x17, 0x14,
0x1A, 0x2F, 0x1C, 0x4A, 0xB9, 0xB8, 0x19, 0x1C,
0x1D, 0x17, 0x26, 0x15, 0x14, 0x15, 0x17, 0x1D,
0xFF, 0xFF, 0x3E, 0x1D, 0x1C, 0x2B, 0x1D, 0x3F,
0x00, 0x0A, 0x4D, 0x41, 0x43, 0x49, 0x4E, 0x54,
0x4F, 0x53, 0x48, 0x20, 0xEF, 0x1E, 0x2D, 0xFF,
0xFF, 0x4F, 0x1D, 0x19, 0x18, 0x29, 0x17, 0x1C,
0x1E, 0x1D, 0xFF, 0xFF, 0x19, 0x15, 0x19, 0x1A,
0x29, 0x17, 0x18, 0x1E, 0x1B, 0x1C, 0x1E, 0xFF,
0xBF, 0x1C, 0x26, 0x2B, 0x1A, 0x19, 0x28, 0x16,
0x1E, 0x16, 0x14, 0x19, 0x1C, 0xFF, 0x9F, 0x19,
0x14, 0x19, 0x2C, 0x1B, 0x29, 0x18, 0x17, 0x15,
0x1A, 0x1B, 0x10, 0x12, 0x16, 0x1A, 0xFF, 0x6F,
0x1E, 0x16, 0x17, 0x3C, 0x1B, 0x1A, 0x19, 0x18,
0x17, 0x16, 0x15, 0x16, 0x1E, 0x14, 0x11, 0x14,
0x18, 0x1B, 0xFF, 0x4F, 0x1C, 0x15, 0x18, 0x2C,
0x3B, 0x19, 0x18, 0x16, 0x35, 0x13, 0x1D, 0x19,
0x10, 0x12, 0x17, 0x1A, 0x1E, 0xFF, 0x2F, 0x1B,
0x14, 0x19, 0x1C, 0x2B, 0x2A, 0x29, 0x17, 0x15,
0x34, 0x12, 0x1A, 0x1C, 0x21, 0x14, 0x18, 0x1C,
0xFF, 0x1F, 0x1A, 0x14, 0x19, 0x1B, 0x2A, 0x29,
0x38, 0x16, 0x24, 0x13, 0x14, 0x12, 0x15, 0x1E,
0x13, 0x10, 0x12, 0x16, 0x1A, 0xFF, 0x1B, 0x12,
0x17, 0x39, 0x28, 0x37, 0x16, 0x15, 0x63, 0x1E,
0x17, 0x10, 0x11, 0x15, 0x18, 0x1E, 0xEF, 0x13,
0x12, 0x16, 0x47, 0x26, 0x45, 0x13, 0x22, 0x23,
0x11, 0x2A, 0x11, 0x10, 0x13, 0x17, 0x1C, 0xDF,
0x1A, 0x10, 0x11, 0x14, 0x45, 0x64, 0x13, 0x42,
0x11, 0x16, 0x1D, 0x12, 0x10, 0x12, 0x16, 0x19,
0xDF, 0x17, 0x10, 0x31, 0x12, 0x93, 0x42, 0x11,
0x14, 0x1E, 0x14, 0x10, 0x11, 0x15, 0x17, 0x1E,
0xCF, 0x1D, 0x1B, 0x1A, 0x19, 0x17, 0x16, 0x25,
0x12, 0x11, 0x12, 0x43, 0x12, 0x13, 0x22, 0x11,
0x12, 0x1D, 0x16, 0x20, 0x13, 0x16, 0x1C, 0xCF,
0x2D, 0x5E, 0x1D, 0x1C, 0x19, 0x17, 0x16, 0x15,
0x14, 0x13, 0x42, 0x21, 0x1A, 0x1B, 0x13, 0x12,
0x13, 0x15, 0x1A, 0xCF, 0x1E, 0x1C, 0x1D, 0x7E,
0x1D, 0x1C, 0x1B, 0x1A, 0x29, 0x18, 0x16, 0x14,
0x12, 0x10, 0x17, 0x1E, 0x1C, 0x1B, 0x2A, 0x1C,
0xDF, 0x1D, 0x1C, 0x1D, 0x2E, 0x2D, 0x5C, 0x2D,
0x1C, 0x1D, 0x1C, 0x2B, 0x18, 0x19, 0x1C, 0x19,
0x1A, 0x19, 0x1A, 0x1C, 0xEF, 0x1D, 0x4C, 0x7D,
0x3C, 0x2D, 0x1E, 0x2D, 0x19, 0x10, 0x15, 0x18,
0x17, 0x18, 0x1B, 0xEF, 0x1E, 0x2D, 0x1B, 0x1C,
0x1D, 0x3E, 0x2D, 0x2C, 0x1D, 0x2E, 0x2D, 0x1C,
0x19, 0x10, 0x15, 0x19, 0x18, 0x19, 0x1A, 0xFF,
0x2F, 0x1E, 0x1D, 0x2C, 0x1D, 0x2E, 0x4D, 0x1E,
0x2D, 0x1E, 0x1B, 0x18, 0x16, 0x17, 0x18, 0x2B,
0x4D, 0x2C, 0x1E, 0xAF, 0x3E, 0x1D, 0x1C, 0x5B,
0x1A, 0x2B, 0x18, 0x27, 0x29, 0x1B, 0x1A, 0x29,
0x14, 0x53, 0x12, 0x13, 0x16, 0x18, 0x29, 0x1D,
0x3F, 0x2E, 0x1D, 0x1C, 0x2B, 0x4A, 0x29, 0x28,
0x17, 0x56, 0x15, 0x18, 0x1C, 0x19, 0x43, 0x22,
0x14, 0x17, 0x28, 0x29, 0x1C, 0xFF, 0x6F, 0x1E,
0x1C, 0x2B, 0x1C, 0x2E, 0x1D, 0x3C, 0x2B, 0x1D,
0x1E, 0x4F, 0x00, 0x05, 0x49, 0x4D, 0x41, 0x43,
0x20, 0xA0, 0x13, 0x64, 0xD5, 0x12, 0xF0, 0x30,
0x19, 0x1E, 0x1C, 0x5D, 0x6C, 0x5D, 0x1C, 0x1D,
0x1F, 0x16, 0xF0, 0x20, 0x1D, 0x1B, 0x19, 0x3C,
0x2D, 0x1B, 0x1A, 0x1B, 0x3A, 0x1C, 0x1D, 0x1C,
0x1D, 0x1C, 0x1A, 0x18, 0x1F, 0x1A, 0xF0, 0x20,
0x3C, 0x3B, 0x3E, 0xBF, 0x1A, 0x1F, 0x1A, 0xF0,
0x20, 0x3C, 0x17, 0x14, 0x19, 0x17, 0x14, 0x1A,
0x1E, 0x6D, 0x4F, 0x1A, 0x1F, 0x1A, 0xF0, 0x20,
0x1C, 0x1B, 0x1C, 0x1B, 0x15, 0x1D, 0x27, 0x1D,
0x1E, 0x3C, 0x7F, 0x1A, 0x1F, 0x1A, 0xF0, 0x20,
0x1C, 0x1B, 0x1C, 0x18, 0x13, 0x1B, 0x16, 0x14,
0x1B, 0x1E, 0x1C, 0x3D, 0x1C, 0x5F, 0x1A, 0x1F,
0x1A, 0xF0, 0x20, 0x1C, 0x1B, 0x1C, 0x19, 0x18,
0x29, 0x18, 0x1A, 0x4D, 0x1E, 0x6F, 0x1A, 0x1F,
0x1A, 0xF0, 0x20, 0x1C, 0x1B, 0x1D, 0x2B, 0x8C,
0x1D, 0x3F, 0x1E, 0x1D, 0x1E, 0x1A, 0x1F, 0x1A,
0xF0, 0x20, 0x1C, 0x4B, 0x6C, 0x6D, 0x1C, 0x1B,
0x1C, 0x1A, 0x1F, 0x1A, 0xF0, 0x20, 0x1B, 0x1E,
0x6D, 0xCE, 0x2F, 0x1A, 0xF0, 0x20, 0x1B, 0x5E,
0xFF, 0x1F, 0x1A, 0xF0, 0x20, 0x1B, 0x6E, 0x2D,
0x1C, 0x2D, 0x2C, 0x1D, 0x1E, 0x6F, 0x1A, 0xF0,
0x20, 0x1B, 0x4E, 0x1D, 0x2C, 0x6B, 0x3C, 0x5F,
0x1A, 0xF0, 0x20, 0x1B, 0x3E, 0x1D, 0x5B, 0x3D,
0x4B, 0x1C, 0x4F, 0x1A, 0xF0, 0x20, 0x1B, 0x1E,
0x2D, 0x1C, 0x2B, 0x1A, 0x1B, 0x4F, 0x1E, 0x1A,
0x3B, 0x1E, 0x3F, 0x1A, 0xF0, 0x20, 0x1A, 0x3D,
0x1B, 0x4A, 0x1E, 0x3F, 0x1D, 0x4A, 0x1E, 0x3F,
0x1A, 0xF0, 0x20, 0x1A, 0x1D, 0x1C, 0x1D, 0x1C,
0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x2B, 0x1A, 0x19,
0x2A, 0x19, 0x1B, 0x4F, 0x1A, 0xF0, 0x20, 0x1A,
0x3C, 0x1D, 0x1C, 0x1A, 0x89, 0x1A, 0x1B, 0x1E,
0x4F, 0x1A, 0xF0, 0x20, 0x19, 0x4C, 0x2D, 0x1C,
0x1B, 0x1A, 0x2B, 0x1A, 0x1B, 0x1C, 0x1D, 0x3E,
0x3F, 0x1A, 0xF0, 0x20, 0x1A, 0x5C, 0x6D, 0x7E,
0x3F, 0x19, 0xF0, 0x20, 0x15, 0x3B, 0x5C, 0x8D,
0x4E, 0x1D, 0x13, 0xF0, 0x30, 0x11, 0xF2, 0x42,
0x11, 0x90, 0x00, 0x05, 0x49, 0x50, 0x4F, 0x44,
0x20, 0xEF, 0x1D, 0x4C, 0x1B, 0x2C, 0x4B, 0x5A,
0x29, 0x1A, 0x39, 0x28, 0x1B, 0xDF, 0x1D, 0x15,
0x16, 0x47, 0x18, 0x19, 0x1A, 0x49, 0x2A, 0x49,
0x48, 0x19, 0x17, 0x19, 0xDF, 0x1C, 0x14, 0x13,
0x24, 0x25, 0x16, 0x17, 0x18, 0x27, 0x78, 0x67,
0x16, 0x19, 0xDF, 0x1A, 0x13, 0x22, 0x13, 0x14,
0x15, 0x46, 0x17, 0x18, 0xB7, 0x26, 0x1A, 0xDF,
0x19, 0x13, 0x22, 0x13, 0x25, 0x26, 0xB7, 0x46,
0x17, 0x16, 0x1B, 0xDF, 0x17, 0x13, 0x32, 0x14,
0x26, 0x27, 0xC6, 0x37, 0x16, 0x1C, 0xDF, 0x16,
0x42, 0x14, 0x15, 0x17, 0x18, 0x25, 0x26, 0x25,
0x36, 0x15, 0x76, 0x1D, 0xDF, 0x15, 0x42, 0x13,
0x16, 0x19, 0x55, 0x14, 0x36, 0x75, 0x14, 0x15,
0x1E, 0xCF, 0x1E, 0x14, 0x41, 0x13, 0x27, 0x54,
0x16, 0x17, 0x16, 0x25, 0x14, 0x15, 0x24, 0x33,
0x15, 0x1E, 0xCF, 0x1D, 0x13, 0x41, 0x14, 0x17,
0x14, 0x43, 0x16, 0x17, 0x25, 0x44, 0x23, 0x22,
0x13, 0x15, 0xDF, 0x1C, 0x13, 0x41, 0x14, 0x23,
0x22, 0x13, 0x26, 0x15, 0x14, 0x43, 0x52, 0x13,
0x16, 0xDF, 0x1A, 0x12, 0x30, 0x62, 0x44, 0x23,
0x22, 0x31, 0x22, 0x11, 0x12, 0x16, 0xDF, 0x18,
0x11, 0x20, 0x61, 0x62, 0x91, 0x12, 0x17, 0xDF,
0x17, 0x11, 0x20, 0xC1, 0x50, 0x41, 0x12, 0x18,
0xDF, 0x16, 0xF0, 0x60, 0x31, 0x12, 0x18, 0xDF,
0x15, 0x30, 0x14, 0x11, 0x13, 0x12, 0x13, 0x22,
0x51, 0x30, 0x11, 0x50, 0x12, 0x19, 0xBF, 0x1D,
0x19, 0x14, 0x33, 0x26, 0x17, 0x28, 0x19, 0x1A,
0x25, 0x17, 0x16, 0x27, 0x15, 0x13, 0x1A, 0x14,
0x12, 0x30, 0x12, 0x1A, 0x7F, 0x1C, 0x19, 0x16,
0x14, 0x13, 0x15, 0x17, 0x46, 0x17, 0x26, 0x37,
0x15, 0x16, 0x58, 0x27, 0x16, 0x14, 0x12, 0x21,
0x13, 0x1B, 0x2F, 0x1E, 0x1C, 0x1A, 0x28, 0x49,
0x3A, 0x28, 0x17, 0x18, 0x47, 0x16, 0x15, 0x16,
0x25, 0x14, 0x45, 0x14, 0x13, 0x31, 0x13, 0x16,
0x1D, 0x1F, 0x29, 0x1B, 0x3C, 0x3D, 0x5E, 0x1C,
0x1B, 0x1A, 0x29, 0x17, 0x16, 0x17, 0x28, 0x16,
0x25, 0x24, 0x13, 0x14, 0x12, 0x21, 0x13, 0x25,
0x1B, 0x2F, 0x1A, 0x46, 0x17, 0x18, 0x19, 0x3A,
0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x1B, 0x1C, 0x1B,
0x4A, 0x29, 0x18, 0x17, 0x16, 0x25, 0x14, 0x13,
0x14, 0x19, 0x16, 0x1B, 0x9F, 0x1E, 0x1D, 0x1C,
0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14,
0x25, 0x14, 0x23, 0x84, 0x23, 0x14, 0x16, 0x1B,
0xFF, 0x9F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19,
0x18, 0x17, 0x25, 0x14, 0x13, 0x14, 0x1A, 0x8F,
0x00, 0x0C, 0x4D, 0x41, 0x43, 0x42, 0x4F, 0x4F,
0x4B, 0x20, 0x50, 0x52, 0x4F, 0x20, 0xFF, 0x9F,
0x40, 0xFF, 0xFF, 0x4F, 0x60, 0xFF, 0xFF, 0x2F,
0x70, 0xFF, 0xFF, 0x3F, 0x60, 0xFF, 0xFF, 0x3F,
0x50, 0xFF, 0xBF, 0x40, 0x5F, 0x20, 0x5F, 0x60,
0xEF, 0xF0, 0xF0, 0x8F, 0xF0, 0xF0, 0x30, 0x5F,
0xF0, 0xF0, 0x40, 0x5F, 0xF0, 0xF0, 0x30, 0x7F,
0xF0, 0xF0, 0x20, 0x8F, 0xF0, 0xF0, 0x20, 0x8F,
0xF0, 0xF0, 0x20, 0x8F, 0xF0, 0xF0, 0x20, 0x8F,
0xF0, 0xF0, 0x30, 0x7F, 0xF0, 0xF0, 0x50, 0x6F,
0xF0, 0xF0, 0x60, 0x5F, 0xF0, 0xF0, 0x50, 0x5F,
0xF0, 0xF0, 0x40, 0x8F, 0xF0, 0xF0, 0x10, 0xAF,
0xF0, 0xE0, 0xDF, 0xF0, 0xB0, 0xFF, 0x80, 0x7F,
0x80, 0x8F, 0x00, 0x13, 0x54, 0x48, 0x45, 0x20,
0x4E, 0x45, 0x58, 0x54, 0x20, 0x54, 0x48, 0x49,
0x52, 0x54, 0x59, 0x2E, 0x2E, 0x2E, 0x20, 0x00
];

loadPROG()



// WOZ MONITOR (Original Apple 1 ROM)
global.ROM = [0xD8, 0x58, 0xA0, 0x7F, 0x8C, 0x12, 0xD0, 0xA9,
	0xA7, 0x8D, 0x11, 0xD0, 0x8D, 0x13, 0xD0, 0xC9,
	0xDF, 0xF0, 0x13, 0xC9, 0x9B, 0xF0, 0x03, 0xC8,
	0x10, 0x0F, 0xA9, 0xDC, 0x20, 0xEF, 0xFF, 0xA9,
	0x8D, 0x20, 0xEF, 0xFF, 0xA0, 0x01, 0x88, 0x30,
	0xF6, 0xAD, 0x11, 0xD0, 0x10, 0xFB, 0xAD, 0x10,
	0xD0, 0x99, 0x00, 0x02, 0x20, 0xEF, 0xFF, 0xC9,
	0x8D, 0xD0, 0xD4, 0xA0, 0xFF, 0xA9, 0x00, 0xAA,
	0x0A, 0x85, 0x2B, 0xC8, 0xB9, 0x00, 0x02, 0xC9,
	0x8D, 0xF0, 0xD4, 0xC9, 0xAE, 0x90, 0xF4, 0xF0,
	0xF0, 0xC9, 0xBA, 0xF0, 0xEB, 0xC9, 0xD2, 0xF0,
	0x3B, 0x86, 0x28, 0x86, 0x29, 0x84, 0x2A, 0xB9,
	0x00, 0x02, 0x49, 0xB0, 0xC9, 0x0A, 0x90, 0x06,
	0x69, 0x88, 0xC9, 0xFA, 0x90, 0x11, 0x0A, 0x0A,
	0x0A, 0x0A, 0xA2, 0x04, 0x0A, 0x26, 0x28, 0x26,
	0x29, 0xCA, 0xD0, 0xF8, 0xC8, 0xD0, 0xE0, 0xC4,
	0x2A, 0xF0, 0x97, 0x24, 0x2B, 0x50, 0x10, 0xA5,
	0x28, 0x81, 0x26, 0xE6, 0x26, 0xD0, 0xB5, 0xE6,
	0x27, 0x4C, 0x44, 0xFF, 0x6C, 0x24, 0x00, 0x30,
	0x2B, 0xA2, 0x02, 0xB5, 0x27, 0x95, 0x25, 0x95,
	0x23, 0xCA, 0xD0, 0xF7, 0xD0, 0x14, 0xA9, 0x8D,
	0x20, 0xEF, 0xFF, 0xA5, 0x25, 0x20, 0xDC, 0xFF,
	0xA5, 0x24, 0x20, 0xDC, 0xFF, 0xA9, 0xBA, 0x20,
	0xEF, 0xFF, 0xA9, 0xA0, 0x20, 0xEF, 0xFF, 0xA1,
	0x24, 0x20, 0xDC, 0xFF, 0x86, 0x2B, 0xA5, 0x24,
	0xC5, 0x28, 0xA5, 0x25, 0xE5, 0x29, 0xB0, 0xC1,
	0xE6, 0x24, 0xD0, 0x02, 0xE6, 0x25, 0xA5, 0x24,
	0x29, 0x07, 0x10, 0xC8, 0x48, 0x4A, 0x4A, 0x4A,
	0x4A, 0x20, 0xE5, 0xFF, 0x68, 0x29, 0x0F, 0x09,
	0xB0, 0xC9, 0xBA, 0x90, 0x02, 0x69, 0x06, 0x2C,
	0x12, 0xD0, 0x30, 0xFB, 0x8D, 0x12, 0xD0, 0x60,
	0x00, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0x00, 0x00];


var cpu = new CPU6502();


function bitClear(num, bit){
    return num & ~(1<<bit);
}

function bitSet(num, bit){
    return num | 1<<bit;
}

function loadPROG() {
	// LOAD A PROG
	const prg_addr = PROG[1] | PROG[0] << 8;

	for (i = 0; i < (PROG.length)-2 ; i++) {
	  RAM_BANK_1[prg_addr+i] = PROG[i+2];
	}
}

PIARead = function (address) {

	let val;
	// PIA 6821
	switch (address) {

	  case KBD_ADDR:
		val=KBD;
		// We'v read the char, clear B7
		KBDCR = bitClear(KBDCR, 7);
		break;

	  case KBDCR_ADDR:
		val=KBDCR;
		break;

	  case DSP_ADDR:
		val=DSP;
		break;

	  case DSPCR_ADDR:
		val=DSPCR;
		break;

	  default:
		val=0;
		break;
	}
	return val;
}


PIAWrite = function (address, value) {
	switch (address) {

	  // Keyboard
	  case KBD_ADDR:
		KBD=value;
		break;

	  case KBDCR_ADDR:
		KBDCR=value;
		break;

	  // Display
	  case DSP_ADDR:
		DSP=value;

		switch(DSP) {
		  case CR:
		  	process.stdout.write('\n')
			break;
		  case BS:
		  	process.stdout.write(SERIAL_BS)
			break;
		  default:
		  	process.stdout.write(String.fromCharCode(DSP & 0x7F));
			break;
		}
		DSP = bitClear(DSP, 7);
		break;

	  case DSPCR_ADDR:
		DSPCR=value;
		break;
	}
  }



cpu.read = function(address) {
	let val=0;

	switch (address >> 12) {
    // $0000-$0FFF 4KB Standard RAM
    case 0x0:
	val=RAM_BANK_1[address-RAM_BANK1_ADDR];
		break;

		// $E000-$EFFF 4KB Extended RAM
		case 0xE:
			val=RAM_BANK_2[address-RAM_BANK2_ADDR];
			break;

		// $FF00-$FFFF 256 Bytes ROM
		case 0xF:
			val=ROM[address-ROM_ADDR];
			break;

		// $D010-$D013 PIA (6821) [KBD & DSP]
		case 0xD:
			val=PIARead(address);
			break;

		// Segmentation Fault. Just return 0
		default:
			val=0;
			break;
	}

	return val;
}

cpu.write = function(address, value) {
	switch (address >> 12) {
		case 0x0:
		  RAM_BANK_1[address-RAM_BANK1_ADDR]=value;
		  break;
		case 0xE:
		  RAM_BANK_2[address-RAM_BANK2_ADDR]=value;
		  break;
		case 0xD:
		  PIAWrite(address, value);
		  break;
	  }
}

// Readline lets us tap into the process events
const readline = require('readline');

// Allows us to listen for events from stdin
readline.emitKeypressEvents(process.stdin);

// Raw mode gets rid of standard keypress events and other
// functionality Node.js adds by default
process.stdin.setRawMode(true);


// Start the keypress listener for the process
process.stdin.on('keypress', (str, key) => {
    // "Raw" mode so we must do our own kill switch
    if(key.sequence === '\u0003') {
        process.exit();
    }

	const tempKBD = str;
	switch (tempKBD) {
	  case 0xA:
		// Not expected from KEYB
		// Just ignore
		return;
		break;
	  case 0x8:
	  case 0x7F:
		// BS
		tempKBD = 0x5F;
		break;
	}

	KBD = tempKBD.charCodeAt(0);
	KBD = bitSet(KBD, 7);
	KBDCR = bitSet(KBDCR, 7);
});


cpu.reset();

var start = Date.now();
cpu.cycles = 0;

function loop() {
	cpu.step();
	//console.log(KBD.toString(16))
	//console.log(KBD_ADDR.toString(16))
	setTimeout(loop, 0);
}

loop();